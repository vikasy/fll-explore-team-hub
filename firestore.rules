rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /* ===================== Helper Functions ===================== */
    function isAuthed() { 
      return request.auth != null; 
    }

    function authEmail() {
      return request.auth != null && request.auth.token.email != null
        ? request.auth.token.email
        : '';
    }

    // Dynamic allowlist: user is allowed if they have a doc keyed by email OR uid
    function isAllowedUser() {
      return isAuthed() && (
        exists(/databases/$(database)/documents/allowedUsers/$(authEmail())) ||
        exists(/databases/$(database)/documents/allowedUsers/$(request.auth.uid))
      );
    }

    // Static parent list (retained from remote rules). Consider migrating to role docs later.
    function isAllowedParent() {
      return request.auth != null && (
        request.auth.token.email == "ketaki.kale@gmail.com" ||
        request.auth.token.email == "dedhia.krina@gmail.com" ||
        request.auth.token.email == "juididolkr@gmail.com" ||
        request.auth.token.email == "namitachitre85@gmail.com" ||
        request.auth.token.email == "vikasy@gmail.com" ||
        request.auth.token.email == "fll2025.westvalley.cusdk8@gmail.com" ||
        request.auth.token.email == "vatsaheera@gmail.com" ||
        request.auth.token.email == "kashyap.parab@gmail.com"
      );
    }

    // Static student list (retained from remote rules)
    function isAllowedStudent() {
      return request.auth != null && (
        request.auth.token.email == "yadavnaom@gmail.com" ||
        request.auth.token.email == "fll2025.westvalley.cusdk8@gmail.com"
      );
    }

    /* ===================== Collections ===================== */

    // Allowlist self-service: user can read/write ONLY their own doc (email or uid)
    match /allowedUsers/{id} {
      allow read, write: if isAuthed() && (id == authEmail() || id == request.auth.uid);
    }

    // Team-shared progress for session checklist
    match /scheduleProgress/{sessionId} {
      allow read: if isAllowedUser();
      allow write: if isAllowedUser()
        && request.resource.data.keys().hasOnly(['items', 'updatedAt', 'updatedBy'])
        && (request.resource.data.items is list)
        && request.resource.data.items.size() <= 200;
    }

    // Parent conversation (chat/messages)
    match /parent_conversation/{docId} {
      allow read, write: if isAllowedParent();
    }

    // Parent nightly opt-in
    match /parent_nightly_optin/{docId} {
      allow read, write: if isAllowedParent();
    }

    // Student conversation: allow parents OR listed students
    match /student_conversation/{docId} {
      allow read, write: if isAllowedParent() || isAllowedStudent();
    }

    // Student nightly opt-in
    match /student_nightly_optin/{docId} {
      allow read, write: if isAllowedStudent();
    }

    // Media assets: restrict read & write to allowed parents or students (no public access)
    match /media/{mediaId} {
      allow read: if isAllowedParent() || isAllowedStudent();
      allow create, update: if isAllowedParent() || isAllowedStudent();
      allow delete: if false; // tighten until explicit moderation logic added
    }

    /* OPTIONAL: Add a final catch-all deny for safety
    match /{document=**} {
      allow read, write: if false;
    }
    */
  }
}
