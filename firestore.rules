rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /* ===================== Helper Functions ===================== */
    function isAuthed() { 
      return request.auth != null; 
    }

    function authEmail() {
      return request.auth != null && request.auth.token.email != null
        ? request.auth.token.email
        : '';
    }

    // Dynamic allowlist (simplified): user is allowed if they have a doc keyed by email OR uid.
    function isAllowedUser() {
      return isAuthed() && (
        exists(/databases/$(database)/documents/allowedUsers/$(authEmail())) ||
        exists(/databases/$(database)/documents/allowedUsers/$(request.auth.uid))
      );
    }

    /* Role-based access (dynamic): parent / student flags live inside allowedUsers docs.
       Expect each allowedUsers doc (keyed by authEmail() OR auth.uid) to optionally contain:
         parent: true|false
         student: true|false
         admin: true|false (grants elevated capabilities such as reading access logs)
       Missing flag is treated as false. This eliminates the need to redeploy for membership changes.
    */
    function hasEmailAllowedDoc() {
      return exists(/databases/$(database)/documents/allowedUsers/$(authEmail()));
    }
    function emailAllowedDoc() {
      return get(/databases/$(database)/documents/allowedUsers/$(authEmail()));
    }
    function hasUidAllowedDoc() {
      return exists(/databases/$(database)/documents/allowedUsers/$(request.auth.uid));
    }
    function uidAllowedDoc() {
      return get(/databases/$(database)/documents/allowedUsers/$(request.auth.uid));
    }

    // Resolve role flag from whichever doc (email preferred). Falls back to UID doc.
    function roleFlag(flag) {
      return hasEmailAllowedDoc() ? emailAllowedDoc().data[flag] : (
             hasUidAllowedDoc() ? uidAllowedDoc().data[flag] : false);
    }

    function isAllowedParent() { return isAllowedUser() && roleFlag('parent') == true; }
    function isAllowedStudent() { return isAllowedUser() && roleFlag('student') == true; }
    function isAllowedAdmin() { return isAllowedUser() && roleFlag('admin') == true; }
    function isAllowedGuest() { return isAllowedUser() && roleFlag('guest') == true; }

    /* ===================== Collections ===================== */

    // Allowlist self-service: user can read/write ONLY their own doc (email or uid)
    match /allowedUsers/{id} {
      allow read, write: if isAuthed() && (id == authEmail() || id == request.auth.uid);
    }

    // Team-shared progress for session checklist
    match /scheduleProgress/{sessionId} {
      allow read: if isAllowedUser();
      // Only non-guest roles (parent, student, admin) may write progress
      allow write: if (isAllowedParent() || isAllowedStudent() || isAllowedAdmin())
        && request.resource.data.keys().hasOnly(['items', 'updatedAt', 'updatedBy'])
        && (request.resource.data.items is list)
        && request.resource.data.items.size() <= 200;
    }

    // Parent conversation (chat/messages)
    match /parent_conversation/{docId} {
      allow read, write: if isAllowedParent();
    }

    // Parent nightly opt-in
    match /parent_nightly_optin/{docId} {
      allow read, write: if isAllowedParent();
    }

    // Student conversation: allow parents OR students
    match /student_conversation/{docId} {
      allow read, write: if isAllowedParent() || isAllowedStudent();
    }

    // Student nightly opt-in
    match /student_nightly_optin/{docId} {
      allow read, write: if isAllowedStudent();
    }

    // Media assets: restrict read & write to allowed parents or students (no public access)
    match /media/{mediaId} {
      allow read: if isAllowedParent() || isAllowedStudent();
      allow create, update: if isAllowedParent() || isAllowedStudent();
      allow delete: if false; // tighten until explicit moderation logic added
    }

    // Access logs: one per user per day (doc id pattern: <uid>_<YYYYMMDD>)
    match /accessLogs/{logId} {
      allow create: if isAllowedUser()
        && request.resource.data.keys().hasOnly(['uid','email','ts','date'])
        && request.resource.data.uid == request.auth.uid
        && logId == (request.auth.uid + '_' + request.resource.data.date);
      // Only admins can read access logs.
      allow read: if isAllowedAdmin();
      allow update, delete: if false; // immutable once written
    }

    /* OPTIONAL: Add a final catch-all deny for safety
    match /{document=**} {
      allow read, write: if false;
    }
    */
  }
}
